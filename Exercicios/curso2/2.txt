Unidade 2


Comentários

/* Texto */ - Mais de uma linha
// Texto -Uma Linha
/*** Primeiro Programa Java ***/


Classe

É a unidade básica para uma linguagem Orientada a Objetos como o Java.

class é a palavra reservada que marca o início de declaração de uma classe.

class NomeDaClasse {

}


Bloco

Um bloco está sempre entre chaves {}
Em Java as instruções terminam em ponto e vírgula;


Método MAIN

Toda aplicação Java SE deve possuir um método main.
O método main indica o início de excecução de qualquer programa Java.


public static void main (String args[]){
	//Instruções
}



- Um programa fonte Java deve sempre ter a extensão '.java';
- Um programa Java compilado deve sempre ter a extensão '.class';
- A linguagem é case-sensitive;
- Cada programa é uma classe;
- Nome da classe no programa tem que ser igual ao nome do arquivo físico '.java';
- Sintaxe similar a linguagem C/C++;
- As classes podem estar agrupadas em package;
- Package é um subdiretório. Exemplo: java.awt, java.math;
- As classes podem ser compactadas (zip ou jar);


Exercícios

1) Escreva um programa Java que imprima na tela várias mensagens de texto.


2) Adapte o mesmo programa para mostrar as mensagens com uma janela gráfica.




IDENTIFICADORES

Nomeiam variáveis, funções, classes e objetos;
Podem conter letras, digítos, _ e $;
Não podem ser iniciados por dígito;
Não podem ser palavras reservadas;
Não tem tamanho máximo.


VARIÁVEIS

Variáveis são usdas em linguagens em geral para armazenar valores;
Valores são passados para variáveis através de operações de atribuição;
Sintaxe Padrão no Java:

<TIPO_VARIAVEL> nomeVariavel;

Exemplo:

	int anoNascimento;
	
	
	
Nomes Válidos:

Nome   NumDepen
total_geral NOME


Nomes Inválidos:

1prova
total geral
class


Palavras-chave - Compôe a sintaxe do Java

abstract
boolean
break
byte
case
catch
char
class
continue
default
do
double
else
extends
false
final
finally
float
for
if
implements
import
instanceof
int
interface
long
native
new
null
package
private
protected
public
return
short
static
super
switch
syncronized
this
throw
throws
transient
true
try
void
volatile
while
const *
goto *



* goto e const são palavras-chave, mas não são usadas em Java.


TIPOS DE VARIÁVEIS


            TIPO       MEMÓRIA   FAIXA
Lógico      boolean    1 bit     true ou false

Texto       char       2 bytes   \u0000 a \uFFFF
            String     Variável  \u0000 a \uFFFF em cada localização
            
Integral    byte        1 byte   -128 a 127
	    short       2 bytes  -32,768 a 32,767
	    int         4 bytes  -2,147,483,648 a 2,147,483,647
	    long        8 bytes  -9,223,372,036,854,775,808L a 9,223,372,036,854,775,807l
	    
Ponto       float       4 bytes   aproximadamente +/- 3.40282347E+38F 
Flutuante   			  (7 dígitos decimais significantes)
	    double      8 bytes   aproximadamente +/-
	    			  1.79769313486231570E+308 (15 dígitos decimais significantes)
	    			  
ATRIBUIÇÕES

A atribuição é realizada com o operador '='

= serve apenas para atribuição, não pode ser usado em comparações (que usa ==);
Copia  valor da variável ou constante do lado direito para a variável do lado esquedo.

Ex: y= 13; // copia a constante inteira 13 para y


INICIALIZAÇÃO PADRÃO JAVA

Variáveis númericas com 0;
Variáveis booleanas com false;
Outras variáveis com null.


DECLARAÇÕES E ATRIBUIÇÕES DAS VARIÁVEIS

As declarações podem ser exibidas em qualquer posição do código fonte.

int x,y;
float z= 3.144f;
double w= 3.1415;
boolean verdade = true;
char c,d;
c= 'A';
d= '\u0013';
x= 6;
y= 1000;


LÓGICO

	boolean terminou;
	terminou = true;
	terminou= false;
	
TEXTO
char: representa um caracter Unicode de 16 bits (exemplos: 'a','M','\t','\u02B1');

String: representa uma sequência de caracteres.

	char opcao;
	opcao = 's';
	opcao= 'n';
	
	String frase;
	frase="Ordem e Progesso";
	
	
TIPO INTEGRAL (INTEIRO)

	byte 8 bits
	short 16 bits
	int 32 bits
	long 64 bits

Representações: 2 (decimal) / 077(octal) / 0xBA (hexadecimal)


INTEIRO
	byte index= 50;
	short soma= 2000;
	int num_carros = 5;
	long valor = 0XDADAL;
	
TIPOS PONTO FLUTUANTE (REAL)

	float 32 bits
	double 64 bits
	
Representações: 3.14 / 6.02E23 / 2.718F / 123.4E+306D

	float pi= 3.1415f;
	double pi= 3.1415;
	
TIPO NUMÉRICO COM UNDERSCORE

int newBillion = 1_000_000_000;



EXERCÍCIOS


1) Escreva um programa que calcule o faturamento trimestral de uma empresa de software. Sabendo que, em Janeiro, as vendas foram de R$ 15.000,00, em Fevereiro, R$ 23.000 e em Março, R$ 17.000,00. O Valor final deverá ser impresso na tela.


2) Adapte o programa acima para que as leituras das vendas mensais serja informada pelo usuário final.
	

	
OPERADORES


Um operador produz um novo valor a partir de um ou mais argumentos.

Os operadores em Java são praticamente os mesmos encontrados em outras linguagens.

+,-,/,*,=,==,<,>,>=,&&, ||, etc


A maior parte dos operadores só trabalha com valores de tipos primitivos.

Exceções:

+ e += são usados para concatenação de Strings
!=,= e == são usados também com objetos.


LISTA DE OPERADORES JAVA

OPERADOR    FUNÇÃO
+           Adição
-           Subtração
*           Multiplicação
/           Divisão
%           Resto
++          Incremento
--          Decremento
>           Maior que
>=          Maior ou igual
<           Menor que
<=          Menor ou igual
==          Igual
!=          Não igual
!           Não lógico
&&          E lógico
||          OU lógico
&           AND
^           XOR
|           OR
~           Complemento
<<          Deslocamento à esquerda
>>          Deslocamento à direita
>>>         Deslocamento à direita com zeros
=           Atribuição
+=          Atribuição com adição
-=          Atribuição com subtração
*=          Atribuição com multiplicação
/=          Atribuição com divisão
%=          Atribuição com resto
&=          Atribuição com AND
|=          Atribuição com OR
^⁼               Atribuição com XOR
<<=         Atribuição com deslocamento esquerdo
>>=         Atribuição com deslocamento direito
>>>=        Atribuição com deslocamento à direita com zeros
? :         Operador ternário
(tipo)      Conversão de tipos (cast)
instanceof  Comparação de tipos


EXERCÍCIOS

1) Escreva um programa Java que leia o valor de dois números inteiros e calcule as operações aritméticas abaixo.



+ adição
- subtração
/ divisão
* multiplicação


2) Adapte o programa acima para fazer uso dos Operadores Relacionais e Lógicos listados abaixo.

< menor
> maior
>= maior ou igual

&& E
|| OU




ESTRUTURAS DE SELEÇÃO


O controle de fluxo de execução em Java utiliza os mesmos comandos existentes em outras liguagens.

SELEÇÃO:
if-else, switch-case

REPETIÇÃO:
for, while, do-while

Desvios (somente em estruturas de repetição): continue e break.

Não existe o comando goto.

IF-ELSE

if (expressao booleana)
	instrucao_simples;
	
if (expressao booleana){

	instrucoes

}

if (expressao booleana){
	instrucoes
} else if(expressao booleana){
	instrucoes
} else{
	instrucoes
}

if (cont == 0){
	System.out.println("Cont = 0");
} else if (cont == 1){
	System.out.println("Cont = 1");
} else{
	System.out.println("Cont = Erro");

}


SWITCH-CASE

switch(seletor_inteiro) {

	case valor_inteiro_1 : //Uma constante inteira (incluir char)
		instrucoes;
		break;
	case valor_inteiro_2 :
		instrucoes;
		break;
		
	default:
		instrucoes;
}

switch (letra){
	case 'A' :
		System.out.println("A");
		break;
	case 'B' :
		System.out.println("B");
		break;
	default:
		System.out.println("?");

}


char cor = '';

switch (cor){
	case 0:
		setBackground(Color.black);
		break;
	case 2:
		setBackground(Color.red);
		break;
	default:
		setBackground(Color.white);
		break;
}

BREAK E DEFAULT

A instrução break (opcional) impede que o fluxo de execução continue pelas opções seguintes;

A instrução default (opcional) é chamada quando nenhuma cláusula 'case' for executada.



SWITCH- CASE COM STRING - À PARTIR DO JAVA 7


String cor= "";
switch(cor){
	case "azul":
		setBackground(Color.black);
		break;
	case "vermelho":
		setBackground(Color.red);
		break;
	default:
		setBackground(Color.white);
		break;
}

EXERCÍCIO

1) Escreva um programa que leia uma nota (0 a 100) e escreva o conceito associdado.

[90,100] "Excelente"
[70,90[ "Bom"
[50,70[ "Regular"
[0,50[ "Insuficiente"



WHILE E DO-WHILE

while (expressao booleana){

	instrucoes;
}

do {
	instrucoes;
} while (expressao booleana);

WHILE

int cont =0;

while (cont < 100){
	System.out.println("contando "+cont);
	cont++
}

DO WHILE

int cont =0;
do{
	System.out.println("contando "+cont);
	cont++;
} while (cont <100);



CONTINUE

A instrução continue (opcional) interrompe o fluxo de execução de um bloco de repetiçaõ.


while (!terminado){

	passePagina();
	if(alguemChamou == true){
		break;	//saia deste laco
	}
	if(paginaDePropaganda == true){
		continue; //pule esta iteracao
	}
	leia();
}
restoDoPrograma();

FOR - Usado para quando sabe-se a quantidade exata de repetições necessárias

for (inicializacao; expressoes booleanas; passo da repeticao){

	instrucoes;

}

for ( inicializacao; expressoes booleanas; passo da repeticao) 
	instrucao simples;
	
for (int x=0; x < 10; x++){
	System.out.println("Valor do X : "+x);

}



FOR EACH - For extendido, usado em coleções e API stream

for (var:Collection framework)
	{bloco de comandos}
	
int nums[]={1,2,3,4,5,6,7,8,9,10};
int sum = 0;

for(int x:nums){
	sum= sum + x;
}



EXERCÍCIOS


1) Escreva um programa para calcular a média aritmética, maior e menor valores de um conjunto de valores inteiros positivos.

- Observação: considere o valor (-1) como finalizador.



2) Escreva um programa para gerar a seguinte série abaixo para os 50 primeiros termos.




3) Escreva um programa para gerar os 20 primeiros termos da série de Fobonacci, sendo que F()n= F(n-1)+F(n-2) e F(1)=F(2)=1. Também calcule a sua média

	F(n)=1,1,2,3,5...
	
	
	
VETORES E MATRIZES -
Estrutura de dados onde dados estão armazenados de maneira contígua, lado a lado, onde podem ser manipulados.


Vetores (Arrays)

DECLARAÇÃO

Podem ser declarados arrays de quaisquer dos tipos através dos símbolos "[" e "]".

A declaração não cria o array, isto é, não aloca memória. Isso é feito pela instrução new (arrays são objetos em java);


char s[]; //declaracao

s= new char[3]; //criacao

s[0]='A'; //atribuicao
s[1]= 'B';
s[2]= 'C'; 


Os colchetes podem ser usados antes ou depois da vairável.
Exemplo: char s[] ou char []s;


DECLARANDO, CRIANDO E INICIALIZANDO

char s[]= a{'A', 'B', 'C'};
//Declaracao, criacao e inicializacao


Quando um array é criado, todos os seus elementos são inicializados:


null, para objetos;
0, para int, long, short, byte, float, double;
Unicode 0, para char;
false, para boolean.



Point p[] = new Point[5];
p[0] = new Point();
p[1]= new Point();



Arrays não podem ser dimensionados na definição>

	int vector[5]; //ERRADO!
	
Arrays não podem ser utilizados sem a criação:
	int vector[];
	vector[0]=4; //Errado!
	

LENGTH

Todo vetor em Java possui a propriedade length que informa o número de elementos que possui.

length é uma propriedade read-only e já foi extremamente útil em blocos de repetição antes do JAVA 5.

ANTES DO JAVA 5

int lista[]= new int[10];

for(int j =0; j < lista.length; j++){
	System.out.println(lista[j]);
}

APÓS O JAVA 5

int lista[]= new int[10];

for(int j : lista)
	System.out.println(j);
	
	
	
	
VETORES MULTIDIMENSIONAIS


int matriz[][]= new int [4][4];
matriz[0][0] = 300;
matriz[1][3]= 600;

0   1    2      3      4
----------------------------
300
----------------------------
                       600
----------------------------

----------------------------



//MATRIZ NULA

for()x=0; x <4; x++)
	matriz[x][y]=0;



EXERCÍCIOS



1) Escreva um programa que leia um vetor A de 50 elementos, construa e imprima outro vetor B da seguinte forma:

-Os elementos de ordem par são correspondentes a (2*A);
-Os elementos de ordem ímpar são correspondentes a (A/2).


2) Construa uma matriz identidade I=3 (apenas os valores diagonais são =1). Todos os outtros são 0.



I3= (1  0   0 )
    (0  1   0 )
    (0  0   1 )


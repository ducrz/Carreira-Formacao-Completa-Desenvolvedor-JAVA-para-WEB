UNIDADE 3- ORIENTAÇÃO A OBJETOS

É um dos principais paradigmas da análise, projeto  e construção de software.
Surgiu na década de 60 e foi adotado por várias linguagens de programação, tais como: Java, C++, Objective-C, Smaltalk, Delphi, Javascript, C+, Perl, Python, Ruby, PHP, entre ouras.


A Análise orientada a Objetos

Determina o que o sistema deve fazer: Quais os atores envolvidos? Quais as atividades que serão realizadas?

Decompõe o sistema em objetos: Quais são? Quais tarefas cada objeto terá que fazer?


O Projeto Orientado a Objetos:
Define como o sistema será implementado;
Modela os relacionamento entre os objetos e atores(utiliza-se a linguagem de modelagem UML).
Utiliza e reutiliza abstrações como: classes, objetos, atributos, métodos, interfaces, heranças, polimorfismo, frameworks, etc.

ANÁLISE O.O (1) X Análise Procedural


(1) Trabalha no espaço dos problemas (casos de uso simplificados em objetos).
Abstrações mais simples e mais próximas do mundo real.

(2) Trabalha no espaço da solução (casos de uso decompostos em procedimentos algoritmicos
-Abstrações mais próximas do mundo do computador


VANTAGENS DA ANÁLISE O.O

A orientação a objetos ajuda a melhor organizar e escrever menos código, além de concentrar as responsabilidades nos pontos certos, flexibilizando a aplicação e encapsulando a lógica de negócios;

Em resumo, os principais benefícios da Orientação a Objetos:
1- Facilidade em projetar o software desejado, visto a utilização de abstração (classes x objetos) de alto nível.
2- Facilidade na manutenção do software, visto a simplicidade em testar, manter e depurar o código escrito.
3- Facilidade em reutilizar o software, visto que as classes criadas podem ser reaproveitadas em novos códigos.


O Mundo é Composto por Objetos!



O Que é um Objeto?

Definições

Uma abstração.
Alguma coisa que faz sentido no domínio da aplicação.

Exemplo: CARRO

Utilidades
Facilita a compreensão.
Oferece base real para implementação no computador.


Um objeto é representado por um conjunto de atributos (também conhecidos como propriedades) e por um conjunto de métodos (que definem o comportamento de um dado objeto):

ATRIBUTOS (substantivos)
Motor
Cor
Potência
Fabricante

MÉTODOS (Verbos)
Acelerar
Retroceder
Parar
Abastecer


Exemplo de um Objeto

Atributos

Motor: V12
Cor: Azul
Potência: 600 cv
Fabricante: Ferrari

Métodos (Comportamento)

Acelerar
Retroceder
Parar
Abastecer

CLASSE DE OBJETOS

DEFINIÇÃO

O grupo de objetos que possuem os mesmos atributos e métodos diz-se que pertencem à mesma classe.

Exemplo: Classe Carro


À partir de um classe, são gerados objetos.
Classes são moldes, que geram objetos.


Uma classe é um modelo ou protótipo que define as propriedades e métodos(comportamento) comuns a um conjunto de objetos;

Classes são "moldes" que definem as variáveis e os métodos comuns a todos os objetos de um determinado tipo;


No mundo real existem vários objetos do mesmo tipo. Por exemplo, o seu carro é um dos milhôes que existem no mundo.

Usando a terminologia de orientação a objetos, o objeto seu carro é uma instância da classe de objetos carro.


EXERCÍCIOS

1) Uma casa está para uma planta arquitetônica assim, com um objeto está para:
(a) método
(b) uma propriedade
(c) uma classe V
(d) um atributo
(e) uma herança

2) Para criar um sistema de informação que gerencie o aluguel de uma frota de carros, quais são as classes de objetos necessárias?
Carro, Cliente, Locacao.


Orientação a Objetos em Java

Programas em Java provavelmente irão criar diversos objetos de diversos tipos de classes.


Os objetos interagem entre si através da troca de mensagens.

Após o objeto ter realizado o trabalho proposto, o mesmo é eliminado através da "coleta automática de lixo".

Para a construção de softwares em Java, faz-se uso:

Das classes já existentes no Java:
String(java.lang)
List, Iterator, etc. (Collections API)
Frame (java.awt)
Outras

Das novas classes criadas pelo engenheiro de software.


A classe String está definida no pacote java.lang e representa uma sequência de caracteres;

A criação de um objeto do tipo String pode ser realizado com ou sem a palavra reservada new;


//construcao implicita (String literal)
String str1 = "Java é show!";

//construcao explicita(String object)
String nome = new String("Antonio");

As String literais são armazenadas em uma área comum (common poll), isso facilita o compartilhamento de armazenamento para Strings com o mesmo conteúdo. Já as Strings "objetos" são armazenadas em uma área específica de memória (heap), sem qualquer tipo de compartilhamento.


String s1="Hello"; //String literal
String s2= "Hello"; //String literal
String s3= s1; //Same reference
String s4 = new String("Hello"); //String object
String s5 = new String("Hello"); //String object


s1 == s1; //true, same pointer
s1 == s2; //true, s1 and s1 share storage in common pool
s1 == s3; //true, s3 is assigned same pointer as s1
s1.equals(s3); //true, same contents
s1 == s4; //false, different pointers
s1.equals(s4); //true, same contents
s4== s5; //false, different pointers in heap
s4.equals(s5); //true same contents


Operações com Strings

int length(). boolean equals(String another)
int indexOf(String search), char charAt(int index)
String substring(int fromIndex)
String toLowerCase(), String toUpperCase()
String trim(), String replace(char oldChar, char newChar)
boolean matches(String regexe)
static String format(String formattingString, object... args)



Operações com String

//Criacao
String alo="Alo Pessoal";

//Concatenacao
String nova= ali+", tudo Ok?";

//Edicao
String nova= alo+", tudo OK?";

//Verificando tamanho
int tam= alo.length(); //tamanho = 11


//A partir do Java 5
String.format("%.1f",1.234); //"1.2"
System.out.printf("%.1f",1.234);


String anotherPalindrome= "Niagara. o roar again!";
char aChar = anotherPalindrome.chatAt(9);

String anotherPalindrome = "Niagara. o roar again!";
String roar = anotherPalindrome.substring(11,15);


CONVERSÃO

conversão String => Numero

float a = (Float.valueOf(args[0])).floatValue();
float a= Float.parseFloat(args[0]);


Conversão Número => String

String s= "" +i;
String s= Float.toString(i);



DECLARAÇÃO

class Carro{
//define os seus atributos
String motor, cor;

//define os seus métodos
void acelerar()

}

Representação em UML

---------
CARRO             CLASSE
--------
+motor:String     ATRIBUTOS
+cor:String
----------
+acelerar():void   MÉTODO



NOVO OBJETO EM JAVA

Um objeto de uma classe é criado utilizando-se a palavra new.

Carro carl;
//Cria apenas a referência

Carro carl = new Carro();
//aloca memória e atribui endereço a referência 



class Aplicacao{
public static void main(String args[]){
	Carro car1,car2,car3;
	car1= new Carro(); //Objeto Carro: instancia1
	car2= new Carro(); //Objeto Carro: instancia2
	car3= new Carro(); //Objeto Carro: instancia3
	
	if(car1.TemGasolina()){
		car1.ligar();
	}
	if(car2.TemGasolina()){
		car2.ligar();
	}
}
}


EXERCÍCIOS

1) Escreva as classes (Cliente, Locacao e Carro) do sistema de informação que gerencie o aluguel (sisalucar) de uma frota de carros.

2) Na classe principal do sisalucar (SisalucarApp) crie dois objetos do tipo Cliente e dois objetos do tipo Carro.



ATRIBUTOS E MÉTODOS


As propriedades dos objetos podem ser manipuladas diretamente pelo operador de ponto(1).

Carro car1= new Carro();
car1.cor = "azul";
car1.fabricante = "ferrari";


Sistem.out.println("Cor carro: "+car1.cor); //azul
System.out.println("Fabricante carro: "+car1.fabricante);

Os valores das propriedades podem ser obtidos facilmente pelo operador de ponto(.)



MÉTODOS

Definem o comportamento da classe;

Possuem sintaxe semelhante a sintaxe de definição das funções de um programa procedural;
Determinam o comportamento da classe e a troca de mensagens com outras classes.


class Carro{
	String fabricante, cor;
	int capacidadeTanque;
	float consumo;
	
	public float autonomia(){
		return capacidadeTanque * consumo;
	}
}


ASSINATURA

float              autonomia      ()
tipo de retorno    nome           argumento

A PALAVRA -CHAVE RETURN

A palavra-chave return especifica o que será retornado após a chamada a um método. Se o método foi void, não haverá o uso do return.

boolean metodo(){
	if(condicao){
		instrucao;
		return true;
	}
	resto do metodo
	return false;
}


CHAMADAS DE MÉTODOS

A troca de mensagens entre os objetos é realizada atrvés da chamada de métodos.

EXEMPLO

class Aplicacao{
	public static void main(String args[]){
		Carro car1 = new Carro();
		
		System.out.println(car1.autonomia());	
	}
}


MÉTODO MAIN()

O método main() é chamado (automaticamente) pelo interpretador Java.


Sempre deve possuir a seguinte assinatura:


public static - modificadores

void - tipo de dados retornados

main - nome

(String[] - tipo de dados aceitos como argumento

 args) - Variável local ao método que contém o valor passado na chamada
 
 
 
 EXERCÍCIOS
 
1) No sisalucar criar os atributos e os métodos das classes listadas abaixo:
 
Carro(idCarro, placa, fabricante, modelo, ano, cor, valorDiaria)
Cliente(idCliente, cpf, nome, cnh)
Locacao(idLocacao, idCarro, idCliente, valorLocado, dataInicio, dataFim)



2) Na classe principal do sisalucar (SisalucarApp) crie um objeto do tipo Cliente e um objeto do tipo Carro, com os seus respectivos atributos.

3) Na classe principal do sisalucar (SisalucarApp) criar um objeto do tipo Locacao que faz a associação do objeto do tipo Cliente com o objeto do tipo Carro, criado no exercício anterior. Esta associação é feita via método realizarLocacao.



VARIÁVEIS LOCAIS E VARARGS

Variável dentro de um bloco de execução.


Além das propriedades de um objeto, podem ser definidas variáveis, locais a um método ou a um bloco de operações.

Essas variáveis existirão enquanto o procedimento (método, bloco de controle de execução) a que estiver associadas for executado;

Não  podem ser usadas foram do procedimento onde foram criadas;

Não pode ter modificadores de acesso (private, public, package).


public class Circulo{
	private int radio; //Variáveis visiveis dentro
	private int x,y;   //da classe apenas
	
	public double area(){
		return Math.PI * raio * raio;
	}
	
	public void mudaRadio(int novoRaio){
	//novoRaio é variável local ao método mudaRaio
	
		int maxRaio = 50;
		//maxRaio é variável local ao método mudaRaio
		
		if (novoRadio > maxRadio){
			raio = maxRaio;
			//raio é variável de instância
		}
		if(novoRadio > 0){
			int inutil =0;
			
			//inutil é variável local ao bloco if
			radio = novoRaio;		
		}	
	}
}


As variáveis podem ser declaradas por um tipo primitivo (int, float, char, etc) ou por um tipo de Classe(própria ou do Java);

No primeiro caso (tipo primitivo), o espaço em memória é alocado como parte da operação. No segundo caso (tipo Classe), não há prévia alocação de memória, somente quando o objeto da classe for criado pela chamada da instrução new.


EXERCÍCIO

1) Na classe SisalucarApp criar o método gerarRelatorioLocacao que mostre todas as locações realizadas nos últimos cinco dias. Crie pelo menos uma variável local para calcular o total faturado nesse período.


VARARGS

ASSINATURA TRADICIONAL DE MÉTODO


public static void somar (double n1, double n2){

	double soma= n1+n2;
	System.out.println(soma);
}

No exemplo do método somar, se houver necessidade de inlcuir mais um número, por exemplo quatro, o mesmo método deverá ser alterado.


public static void somar (double n1, double n2, double n3, double n4){

	double soma = n1 + n2 + n3+ n4;
	System.out.println(soma);
}
 
Com o recurso de VARARGS (variable-Length Arguments) é possível declarar um método sem especificar a quantidade de parâmetros exata, trazendo maior flexibilidade ao desenvolvedor.


public static void somar (double ... numeros){
	double soma = 0;
	for(double numero : numeros)
		soma = soma + numero;
	System.out.println(soma);
}

Com esta nova assinatura, o método somar pode receber de 0 a N prâmetros (neste caso, número do tipo double).


SINTAXE

Não é possível declarar novos parâmetros após o uso de varargs.

EXEMPLO INVÁLIDO

void doIt(int a, int b, int ... v, int c){
	//instruções
}

EXEMPLO VÁLIDO

void doIt(int a, int b, int ... v){ //Como último elemento o VARARGS
	//instruções
}


TIPOS DE ARGUMENTOS


Objetos(Passagem por Referência) - As referências originais são sujeitas a alterações dentro do método;

Tipos Primitivos (Passagem por Valor) - As referências originais não são sujeitas a alterações dentro do método.


class conta{
	int cpf, numero;
	float saldo;
	public boolean transfere (Conta conta, float valor){ //Conta é Objeto, float é tipo
		boolean resultado = true;	
	}
}


EXERCÍCIOS

1) Altere o método gerarRelatorioLocacao para fazer o uso de Varargs.


2) Crie a classe Conta conforme o diagrama abaixo:



---------------------------------------------------
	CONTA
---------------------------------------------------
	+numero: int
	+saldo: double
	+limite: double
	+nome: String
----------------------------------------------------
	+saca(valor: double): boolean
	+deposita(valor: double)
	+transfere(destino: Conta, valor: double)
-----------------------------------------------------



3) Posteriormente, implemente o método transfere conforme o trecho de código abaixo:

conta1.transfere(conta2, 50);
A leitura deste código seria "Conta1 transfere para conta2 50 reais".





CONSTRUTORES

Utilizam-se construtores para inicializar o estado inicial dos objetos de uma determinada classe, isto é, atribuir valores aos seus atributos no momento de criação do objeto pela instrução new;

Os construtores possuem o mesmo nome da classe e não têm tipo de retorno;
Uma classe pode ter N construtores;

class Carro{
	float consumo;
	
	Carro(float consumo){
	this.consumo = consumo;	//Construtor
	}
	Carro (){ ... //Construtor vazio
	
	}
}

PALAVRA RESERVADA 'THIS'

Ás vezes é necessário que o objeto se auto-referencie;

Existe uma palavra reservada this que significa uma referência ao próprio objeto.

Um dos principais usos do this é para resolver uma ambiguidade.

class Carro{
	float consumo;
	void acelerar(float consumo){
		this.consumo= consumo;
	}

}

CONSTRUTORES

Toda classe Java define(implicitamente) um construtor padrão "vazio", isto é, não há atribuição de valores aos atributos de um determinado Objeto;

class Carro{
	float consumo;
	
	Carro(){
	
	}
}

Carro car1 = new Carro();
//é chamado o construtor vazio

Quando cria-se um novo construtor em uma determinada classe, o construtor padrão (vazio) deixa de existir e é substituído pelo novo criado pelo desenvolvedor;

class Carro{

	Carro(float consumo){
		...
	}
}

Carro car1 = new Carro(500);
//é chamado o novo construtor

Carro car1 = new Carro(); //ERRO


No Java é possível criar uma classe com vários construtores;

class Carro{
	float consumo;
	
	Carro(float consumo){
		this.consumo = consumo;	
	}
	Carro(){ ...
	
	}
}

A escolha de qual construtor será chamado vai depender dos argumentos que serão passados (ou não) no momento da criação do Objeto.

EXEMPLO

	Carro car1 = new Carro();
	//é chamado o construtor vazio
	
	Carro car2 = new Carro(500);
	//é chamado o construtor que recebe parâmetro
	
	
	
EXERCÍCIO

1) No sisalucar criar pelo menos um construtor para as classes listadas abaixo:

Carro(idCarro, placa, fabricante, modelo, ano, cor, valorDiaria)
Cliente (idCliente, cpf, nome, cnh)
Locacao(idLocacao, idCarro, idCliente, valorLocado, dataInicio, dataFim)


MEMBROS DE CLASSE

São atributos e métodos da classe

Como já foi visto, uma classe é composta de atributos e métodos (também conhecidos como seus membros);

No Java, é possível que esses membros sejam de objeto (é o comum, já estuado até aqui) e que também sejam de classe.

Os Membros de Classe ou "Estáticos" são aqueles utilizados para fazer referência a uma determinada classe, sem haver qualquer relação com os objetos que serão criados da mesma. Neste caso, não se replicam quando novos objetos são criados.

Todo membro de classe (atributo e método) deve usar o qualificador static.

QUANDO UTILIZAR?

Considere o trecho de código abaixo. Pergunta-se: é possível saber o total de contas criadas pela classe "Contas"?

class Conta{
	private int totalDeContas;
	
	Conta(){
		this.totalDeContas = this.totalDeContas +1;	
	}
}


Com o código acima, o valor de 'totalDeContas' será sempre 1. Por quê?
Como o referido atributo é 'de objeto', toda vez que o objeto 'Conta' for criado, o valor de sua variável 'totalDeContas' será 1. Qual a solução? 
Adicionar a palavra static na definição do referido atributo.

SOLUÇÃO
class Conta{
	private static int totalDeContas;
	
	Conta(){
		this.totalDeContas = this.totalDeContas +1;	
	}
}

Com o código acima, o atributo 'totalDeContas' passa a ser único e o seu conteúdo é único para a classe 'Conta';

Para ter acesso a um atributo estático, utiliza-se a sintaxe: <<Classe.membro_estático>>

Exemplo: Conta.totalDeContas


PROCEDIMENTOS DE INICIALIZAÇÃO

Usados para inicializar objetos ou classes.

class Example{
	...
	static{
		...
	}
}

MEMBROS DE CLASSE - RESUMO

public class Casa{

	private Porta porta; //Atributos de instância: cada Objeto
	private int numero; //poderá armazenar valores diferentes nessas variáveis.
	public java.awt.Color cor;
	
	public Casa(){ //Procedimentos de inicialização de objetos (Construtor): código
		porta = new Porta();//é executado após a criação de cada novo objeto.
		numero = ++contagem * 10;//Cada objeto terá um número diferente
	}
	public void abrePorta(){//Método de instância: só é possível chamá-lo se for
	        porta.abre();   //através de um objeto
	}
	public static String arquiteto = "Zé"; //Atributos estáticos: não é preciso criar
	private static int contagem = 0;//objetos para usá-los. Todos os objetos os compartilham
	
	static { //Procedimento de inicialização estático: código é executado uma única vez.
		if (condicao){ //quando a classe é carregada. O arquiteto será um só para todas
			arquiteto = "Og"; //as casas: ou Zé ou Og.
		}
	
	}
}

EXERCÍCIO

1) Na classe principal do sisalucar (SisaluccarApp) criar o atributo de classe frotaCarros. Alterar também o método gerarRelatorioLocacao para um membro de classe.



ATRIBUTOS CONSTANTES, ENUMERAÇÕES E MÉTODOS CONSTANTES


São variáveis cujo valor só pode ser definido uma única vez. São declarados com o uso da palavra reservada final.


class Teste{
	//atributos constantes
	final int ESQUERDA = 0;
	final int DIREITA =0;	
}

Utilizados para determinar valores que não podem ser alterados.

class Teste{
	//Atributos constantes
	public static final int INVERNO=0;
	public static final int PRIMAVERA = 1;
	public static final int VERAO= 2;
	public static final int OUTONO= 3;
}
As constantes geralmente são utilizadas em métodos.

setEstacao(int estacao){ ... }

DESVANTAGENS

(1) Não é typesafe: como a constante estacao é um inteiro, o seguinte código é possível:
	setEstacao(4); //estação não existente
(2) Não tem namespace: mistura-se com outras constantes existente na classe;
(3) Requer recompilação do código se novas constantes forem adicionadas.


SOLUÇÃO: ENUMERATIONS

São classes Java que definem constantes;

Não podem ser instanciadas usando a palavra new.

public enum Conceito{
	RUIM, REGULAR, BOM, EXCELENTE;
}

Os únicos valores aceitos por um tipo enum são os valores previamente definidos.

Conceito c= Conceito.Excelente;
if(c == Conceito.REGULAR)

switch(c){
	case RUIM:
	//...
}

Essas classes podem possuir construtores, métodos e atributos de instância.

public enum Estacao{
	INVERNO, PRIMAVERA, VERAO, OUTONO;
}

public class TesteEstacao{
	public static void main(String[] args){
	
		for(Estacao estacao: Estacao.value())
			System.out.println(estacao);	
	}
}



Definindo valores às Constantes:


public enum Estacao{
	INVERNO(1), PRIMAVERA(2), VERAO(3), OUTONO(4);
	private int valor;
	
	Estacao(int valor){
		this.valor = valor;	
	}
	public int getValor(){
		return this.valor;	
	}
}

As constantes são sempre declaradas no início.

MÉTODOS CONSTANTES

São aqueles que não podem ser modificados no processo de herança;


class Teste{
	//Método constante
	private final static void main(String args[]){
	
	}
}


EXERCÍCIO

1) Na classe Carro criar um atributo de classe Revendedor do tipo enumeration com as seguintes propriedades de um revendedor de carros(cnpj, endereco, fabricante);


RESUMO


BOAS PRÁTICAS AO ESCREVER CLASSES


Use e abuse dos espaços.

A ordem dos membros não é importante, mas seguir converções melhora a legibilidade do código:

Mantenha os membros do mesmo tipo juntos (não misture métodos estáticos com métodos de instância);
Declare as variáveis antes ou depois dos métodos(não misture métodos, construtores e variáveis);
Mantenha os seus construtores juntos, de preferência bem no início.


Se for necessário definir blogos static, defina apenas um, e coloque-o no início ou no final da classe.


